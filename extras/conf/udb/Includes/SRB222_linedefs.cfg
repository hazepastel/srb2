doom
{
	misc
	{
		title = "Miscellaneous";

		0
		{
			title = "None";
			prefix = "(0)";
		}
		1
		{
			title = "Per-Sector Gravity";
			prefix = "(1)";
		}
		5
		{
			title = "Camera Scanner <deprecated>";
			prefix = "(5)";
		}
		7
		{
			title = "Sector Flat Alignment";
			prefix = "(7)";
		}
		10
		{
			title = "Culling Plane";
			prefix = "(10)";
		}
		13
		{
			title = "Heat Wave Effect";
			prefix = "(13)";
		}
		40
		{
			title = "Visual Portal Between Tagged Linedefs";
			prefix = "(40)";
		}
		41
		{
			title = "Horizon Effect";
			prefix = "(41)";
		}
		50
		{
			title = "Instantly Lower Floor on Level Load";
			prefix = "(50)";
		}
		51
		{
			title = "Instantly Raise Ceiling on Level Load";
			prefix = "(51)";
		}
		63
		{
			title = "Fake Floor/Ceiling Planes";
			prefix = "(63)";
		}
		540
		{
			title = "Floor Friction";
			prefix = "(540)";
		}
	}

	parameters
	{
		title = "Parameters";

		2
		{
			title = "Custom Exit";
			prefix = "(2)";
		}
		3
		{
			title = "Zoom Tube Parameters";
			prefix = "(3)";
		}
		4
		{
			title = "Speed Pad Parameters";
			prefix = "(4)";
		}
		8
		{
			title = "Special Sector Properties";
			prefix = "(8)";
		}
		9
		{
			title = "Chain Parameters";
			prefix = "(9)";
		}
		11
		{
			title = "Rope Hang Parameters";
			prefix = "(11)";
		}
		12
		{
			title = "Rock Spawner Parameters";
			prefix = "(12)";
		}
		14
		{
			title = "Bustable Block Parameters";
			prefix = "(14)";
		}
		15
		{
			title = "Fan Particle Spawner Parameters";
			prefix = "(15)";
		}
		16
		{
			title = "Minecart Parameters";
			prefix = "(16)";
		}
		64
		{
			title = "Continuously Appearing/Disappearing FOF";
			prefix = "(64)";
		}
		76
		{
			title = "Make FOF Bouncy";
			prefix = "(76)";
		}
	}

	polyobject
	{
		title = "PolyObject";

		20
		{
			title = "First Line";
			prefix = "(20)";
		}
		21
		{
			title = "Explicitly Include Line <disabled>";
			prefix = "(21)";
		}
		22
		{
			title = "Parameters";
			prefix = "(22)";
		}
		30
		{
			title = "Waving Flag";
			prefix = "(30)";
		}
		31
		{
			title = "Displacement by Front Sector";
			prefix = "(31)";
		}
		32
		{
			title = "Angular Displacement by Front Sector";
			prefix = "(32)";
		}
	}

	planemove
	{
		title = "Plane Movement";

		52
		{
			title = "Continuously Falling Sector";
			prefix = "(52)";
		}
		53
		{
			title = "Continuous Floor/Ceiling Mover";
			prefix = "(53)";
		}
		54
		{
			title = "Continuous Floor Mover";
			prefix = "(54)";
		}
		55
		{
			title = "Continuous Ceiling Mover";
			prefix = "(55)";
		}
		56
		{
			title = "Continuous Two-Speed Floor/Ceiling Mover";
			prefix = "(56)";
		}
		57
		{
			title = "Continuous Two-Speed Floor Mover";
			prefix = "(57)";
		}
		58
		{
			title = "Continuous Two-Speed Ceiling Mover";
			prefix = "(58)";
		}
		59
		{
			title = "Activate Moving Platform";
			prefix = "(59)";
		}
		60
		{
			title = "Activate Moving Platform (Adjustable Speed)";
			prefix = "(60)";
		}
		61
		{
			title = "Crusher (Ceiling to Floor)";
			prefix = "(61)";
		}
		62
		{
			title = "Crusher (Floor to Ceiling)";
			prefix = "(62)";
		}
		66
		{
			title = "Move Floor by Displacement";
			prefix = "(66)";
		}
		67
		{
			title = "Move Ceiling by Displacement";
			prefix = "(67)";
		}
		68
		{
			title = "Move Floor and Ceiling by Displacement";
			prefix = "(68)";
		}
	}

	fofsolid
	{
		title = "FOF (solid)";

		100
		{
			title = "Solid, Opaque";
			prefix = "(100)";
		}
		101
		{
			title = "Solid, Opaque, No Shadow";
			prefix = "(101)";
		}
		102
		{
			title = "Solid, Translucent";
			prefix = "(102)";
		}
		103
		{
			title = "Solid, Sides Only";
			prefix = "(103)";
		}
		104
		{
			title = "Solid, No Sides";
			prefix = "(104)";
		}
		105
		{
			title = "Solid, Invisible";
			prefix = "(105)";
		}
		140
		{
			title = "Intangible from Bottom, Opaque";
			prefix = "(140)";
		}
		141
		{
			title = "Intangible from Bottom, Translucent";
			prefix = "(141)";
		}
		142
		{
			title = "Intangible from Bottom, Translucent, No Sides";
			prefix = "(142)";
		}
		143
		{
			title = "Intangible from Top, Opaque";
			prefix = "(143)";
		}
		144
		{
			title = "Intangible from Top, Translucent";
			prefix = "(144)";
		}
		145
		{
			title = "Intangible from Top, Translucent, No Sides";
			prefix = "(145)";
		}
		146
		{
			title = "Only Tangible from Sides";
			prefix = "(146)";
		}
	}

	fofintangible
	{
		title = "FOF (intangible)";

		120
		{
			title = "Water, Opaque";
			prefix = "(120)";
		}
		121
		{
			title = "Water, Translucent";
			prefix = "(121)";
		}
		122
		{
			title = "Water, Opaque, No Sides";
			prefix = "(122)";
		}
		123
		{
			title = "Water, Translucent, No Sides";
			prefix = "(123)";
		}
		124
		{
			title = "Goo Water, Translucent";
			prefix = "(124)";
		}
		125
		{
			title = "Goo Water, Translucent, No Sides";
			prefix = "(125)";
		}
		220
		{
			title = "Intangible, Opaque";
			prefix = "(220)";
		}
		221
		{
			title = "Intangible, Translucent";
			prefix = "(221)";
		}
		222
		{
			title = "Intangible, Sides Only";
			prefix = "(222)";
		}
		223
		{
			title = "Intangible, Invisible";
			prefix = "(223)";
		}
	}

	fofmoving
	{
		title = "FOF (moving)";

		150
		{
			title = "Air Bobbing";
			prefix = "(150)";
		}
		151
		{
			title = "Air Bobbing (Adjustable)";
			prefix = "(151)";
		}
		152
		{
			title = "Reverse Air Bobbing (Adjustable)";
			prefix = "(152)";
		}
		153
		{
			title = "Dynamically Sinking Platform";
			prefix = "(153)";
		}
		160
		{
			title = "Water Bobbing";
			prefix = "(160)";
		}
		190
		{
			title = "Rising Platform, Solid, Opaque";
			prefix = "(190)";
		}
		191
		{
			title = "Rising Platform, Solid, Opaque, No Shadow";
			prefix = "(191)";
		}
		192
		{
			title = "Rising Platform, Solid, Translucent";
			prefix = "(192)";
		}
		193
		{
			title = "Rising Platform, Solid, Invisible";
			prefix = "(193)";
		}
		194
		{
			title = "Rising Platform, Intangible from Bottom, Opaque";
			prefix = "(194)";
		}
		195
		{
			title = "Rising Platform, Intangible from Bottom, Translucent";
			prefix = "(195)";
		}
	}

	fofcrumbling
	{
		title = "FOF (crumbling)";

		170
		{
			title = "Crumbling, Respawn";
			prefix = "(170)";
		}
		171
		{
			title = "Crumbling, No Respawn";
			prefix = "(171)";
		}
		172
		{
			title = "Crumbling, Respawn, Intangible from Bottom";
			prefix = "(172)";
		}
		173
		{
			title = "Crumbling, No Respawn, Intangible from Bottom";
			prefix = "(173)";
		}
		174
		{
			title = "Crumbling, Respawn, Int. from Bottom, Translucent";
			prefix = "(174)";
		}
		175
		{
			title = "Crumbling, No Respawn, Int. from Bottom, Translucent";
			prefix = "(175)";
		}
		176
		{
			title = "Crumbling, Respawn, Floating, Bobbing";
			prefix = "(176)";
		}
		177
		{
			title = "Crumbling, No Respawn, Floating, Bobbing";
			prefix = "(177)";
		}
		178
		{
			title = "Crumbling, Respawn, Floating";
			prefix = "(178)";
		}
		179
		{
			title = "Crumbling, No Respawn, Floating";
			prefix = "(179)";
		}
		180
		{
			title = "Crumbling, Respawn, Air Bobbing";
			prefix = "(180)";
		}
	}

	fofspecial
	{
		title = "FOF (special)";

		200
		{
			title = "Light Block";
			prefix = "(200)";
		}
		201
		{
			title = "Half Light Block";
			prefix = "(201)";
		}
		202
		{
			title = "Fog Block";
			prefix = "(202)";
		}
		250
		{
			title = "Mario Block";
			prefix = "(250)";
		}
		251
		{
			title = "Thwomp Block";
			prefix = "(251)";
		}
		252
		{
			title = "Shatter Block";
			prefix = "(252)";
		}
		253
		{
			title = "Shatter Block, Translucent";
			prefix = "(253)";
		}
		254
		{
			title = "Bustable Block";
			prefix = "(254)";
		}
		255
		{
			title = "Spin-Bustable Block";
			prefix = "(255)";
		}
		256
		{
			title = "Spin-Bustable Block, Translucent";
			prefix = "(256)";
		}
		257
		{
			title = "Quicksand";
			prefix = "(257)";
		}
		258
		{
			title = "Laser";
			prefix = "(258)";
		}
		259
		{
			title = "Custom FOF";
			prefix = "(259)";
		}
	}

	linedeftrigger
	{
		title = "Linedef Executor Trigger";

		300
		{
			title = "Continuous";
			prefix = "(300)";
		}
		301
		{
			title = "Each Time";
			prefix = "(301)";
		}
		302
		{
			title = "Once";
			prefix = "(302)";
		}
		303
		{
			title = "Ring Count - Continuous";
			prefix = "(303)";
		}
		304
		{
			title = "Ring Count - Once";
			prefix = "(304)";
		}
		305
		{
			title = "Character Ability - Continuous";
			prefix = "(305)";
		}
		306
		{
			title = "Character Ability - Each Time";
			prefix = "(306)";
		}
		307
		{
			title = "Character Ability - Once";
			prefix = "(307)";
		}
		308
		{
			title = "Race Only - Once";
			prefix = "(308)";
		}
		309
		{
			title = "CTF Red Team - Continuous";
			prefix = "(309)";
		}
		310
		{
			title = "CTF Red Team - Each Time";
			prefix = "(310)";
		}
		311
		{
			title = "CTF Blue Team - Continuous";
			prefix = "(311)";
		}
		312
		{
			title = "CTF Blue Team - Each Time";
			prefix = "(312)";
		}
		313
		{
			title = "No More Enemies - Once";
			prefix = "(313)";
		}
		314
		{
			title = "Number of Pushables - Continuous";
			prefix = "(314)";
		}
		315
		{
			title = "Number of Pushables - Once";
			prefix = "(315)";
		}
		317
		{
			title = "Condition Set Trigger - Continuous";
			prefix = "(317)";
		}
		318
		{
			title = "Condition Set Trigger - Once";
			prefix = "(318)";
		}
		319
		{
			title = "Unlockable - Continuous";
			prefix = "(319)";
		}
		320
		{
			title = "Unlockable - Once";
			prefix = "(320)";
		}
		321
		{
			title = "Trigger After X Calls - Continuous";
			prefix = "(321)";
		}
		322
		{
			title = "Trigger After X Calls - Each Time";
			prefix = "(322)";
		}
		323
		{
			title = "NiGHTSerize - Each Time";
			prefix = "(323)";
		}
		324
		{
			title = "NiGHTSerize - Once";
			prefix = "(324)";
		}
		325
		{
			title = "De-NiGHTSerize - Each Time";
			prefix = "(325)";
		}
		326
		{
			title = "De-NiGHTSerize - Once";
			prefix = "(326)";
		}
		327
		{
			title = "NiGHTS Lap - Each Time";
			prefix = "(327)";
		}
		328
		{
			title = "NiGHTS Lap - Once";
			prefix = "(328)";
		}
		329
		{
			title = "Ideya Capture Touch - Each Time";
			prefix = "(329)";
		}
		330
		{
			title = "Ideya Capture Touch - Once";
			prefix = "(330)";
		}
		331
		{
			title = "Player Skin - Continuous";
			flags64text = "[6] Disable for this skin";
			prefix = "(331)";
		}
		332
		{
			title = "Player Skin - Each Time";
			prefix = "(332)";
		}
		333
		{
			title = "Player Skin - Once";
			prefix = "(333)";
		}
		334
		{
			title = "Object Dye - Continuous";
			prefix = "(334)";
		}
		335
		{
			title = "Object Dye - Each Time";
			prefix = "(335)";
		}
		336
		{
			title = "Object Dye - Once";
			prefix = "(336)";
		}
		337
		{
			title = "Emerald Check - Continuous";
			prefix = "(337)";
		}
		338
		{
			title = "Emerald Check - Each Time";
			prefix = "(338)";
		}
		339
		{
			title = "Emerald Check - Once";
			prefix = "(339)";
		}
		340
		{
			title = "NiGHTS Mare - Continuous";
			prefix = "(340)";
		}
		341
		{
			title = "NiGHTS Mare - Each Time";
			prefix = "(341)";
		}
		342
		{
			title = "NiGHTS Mare - Once";
			prefix = "(342)";
		}
		343
		{
			title = "Gravity Check - Continuous";
			prefix = "(343)";
		}
		344
		{
			title = "Gravity Check - Each Time";
			prefix = "(344)";
		}
		345
		{
			title = "Gravity Check - Once";
			prefix = "(345)";
		}
		399
		{
			title = "Level Load";
			prefix = "(399)";
		}
	}

	linedefexecsector
	{
		title = "Linedef Executor (sector)";

		400
		{
			title = "Set Tagged Sector's Floor Height/Texture";
			prefix = "(400)";
		}
		401
		{
			title = "Set Tagged Sector's Ceiling Height/Texture";
			prefix = "(401)";
		}
		402
		{
			title = "Copy Light Level to Tagged Sectors";
			prefix = "(402)";
		}
		408
		{
			title = "Set Tagged Sector's Flats";
			prefix = "(408)";
		}
		409
		{
			title = "Change Tagged Sector's Tag";
			prefix = "(409)";
		}
		410
		{
			title = "Change Front Sector's Tag";
			prefix = "(410)";
		}
		416
		{
			title = "Start Adjustable Flickering Light";
			prefix = "(416)";
		}
		417
		{
			title = "Start Adjustable Pulsating Light";
			prefix = "(417)";
		}
		418
		{
			title = "Start Adjustable Blinking Light (unsynchronized)";
			prefix = "(418)";
		}
		419
		{
			title = "Start Adjustable Blinking Light (synchronized)";
			prefix = "(419)";
		}
		420
		{
			title = "Fade Light Level";
			prefix = "(420)";
		}
		421
		{
			title = "Stop Lighting Effect";
			prefix = "(421)";
		}
		435
		{
			title = "Change Plane Scroller Direction";
			prefix = "(435)";
		}
		467
		{
			title = "Set Tagged Sector's Light Level";
			prefix = "(467)";
		}
	}

	linedefexecplane
	{
		title = "Linedef Executor (plane movement)";

		403
		{
			title = "Move Tagged Sector's Floor";
			prefix = "(403)";
		}
		404
		{
			title = "Move Tagged Sector's Ceiling";
			prefix = "(404)";
		}
		405
		{
			title = "Move Floor According to Front Texture Offsets";
			prefix = "(405)";
		}
		407
		{
			title = "Move Ceiling According to Front Texture Offsets";
			prefix = "(407)";
		}
		411
		{
			title = "Stop Plane Movement";
			prefix = "(411)";
		}
		428
		{
			title = "Start Platform Movement";
			prefix = "(428)";
		}
		429
		{
			title = "Crush Ceiling Once";
			prefix = "(429)";
		}
		430
		{
			title = "Crush Floor Once";
			prefix = "(430)";
		}
		431
		{
			title = "Crush Floor and Ceiling Once";
			prefix = "(431)";
		}
	}

	linedefexecplayer
	{
		title = "Linedef Executor (player/object)";

		412
		{
			title = "Teleporter";
			prefix = "(412)";
		}
		425
		{
			title = "Change Object State";
			prefix = "(425)";
		}
		426
		{
			title = "Stop Object";
			prefix = "(426)";
		}
		427
		{
			title = "Award Score";
			prefix = "(427)";
		}
		432
		{
			title = "Enable/Disable 2D Mode";
			prefix = "(432)";
		}
		433
		{
			title = "Enable/Disable Gravity Flip";
			prefix = "(433)";
		}
		434
		{
			title = "Award Power-Up";
			prefix = "(434)";
		}
		437
		{
			title = "Disable Player Control";
			prefix = "(437)";
		}
		438
		{
			title = "Change Object Size";
			prefix = "(438)";
		}
		442
		{
			title = "Change Object Type State";
			prefix = "(442)";
		}
		457
		{
			title = "Track Object's Angle";
			prefix = "(457)";
		}
		458
		{
			title = "Stop Tracking Object's Angle";
			prefix = "(458)";
		}
		460
		{
			title = "Award Rings";
			prefix = "(460)";
		}
		461
		{
			title = "Spawn Object";
			prefix = "(461)";
		}
		462
		{
			title = "Stop Timer/Exit Stage in Record Attack";
			prefix = "(462)";
		}
		463
		{
			title = "Dye Object";
			prefix = "(463)";
		}
		464
		{
			title = "Trigger Egg Capsule";
			prefix = "(464)";
		}
		466
		{
			title = "Set Level Failure State";
			prefix = "(466)";
		}
	}

	linedefexecmisc
	{
		title = "Linedef Executor (misc.)";

		413
		{
			title = "Change Music";
			prefix = "(413)";
		}
		414
		{
			title = "Play Sound Effect";
			prefix = "(414)";
		}
		415
		{
			title = "Run Script";
			prefix = "(415)";
		}
		422
		{
			title = "Switch to Cut-Away View";
			prefix = "(422)";
		}
		423
		{
			title = "Change Sky";
			prefix = "(423)";
		}
		424
		{
			title = "Change Weather";
			prefix = "(424)";
		}
		436
		{
			title = "Shatter FOF";
			prefix = "(436)";
		}
		439
		{
			title = "Change Tagged Linedef's Textures";
			prefix = "(439)";
		}
		440
		{
			title = "Start Metal Sonic Race";
			prefix = "(440)";
		}
		441
		{
			title = "Condition Set Trigger";
			prefix = "(441)";
		}
		443
		{
			title = "Call Lua Function";
			prefix = "(443)";
		}
		444
		{
			title = "Earthquake";
			prefix = "(444)";
		}
		445
		{
			title = "Make FOF Disappear/Reappear";
			prefix = "(445)";
		}
		446
		{
			title = "Make FOF Crumble";
			prefix = "(446)";
		}
		447
		{
			title = "Change Tagged Sector's Colormap";
			prefix = "(447)";
		}
		448
		{
			title = "Change Skybox";
			prefix = "(448)";
		}
		449
		{
			title = "Enable Bosses with Parameter";
			prefix = "(449)";
		}
		450
		{
			title = "Execute Linedef Executor (specific tag)";
			prefix = "(450)";
		}
		451
		{
			title = "Execute Linedef Executor (random tag in range)";
			prefix = "(451)";
		}
		452
		{
			title = "Set FOF Translucency";
			prefix = "(452)";
		}
		453
		{
			title = "Fade FOF";
			prefix = "(453)";
		}
		454
		{
			title = "Stop Fading FOF";
			prefix = "(454)";
		}
		455
		{
			title = "Fade Tagged Sector's Colormap";
			prefix = "(455)";
		}
		456
		{
			title = "Stop Fading Tagged Sector's Colormap";
			prefix = "(456)";
		}
		459
		{
			title = "Control Text Prompt";
			prefix = "(459)";
		}
	}

	linedefexecpoly
	{
		title = "Linedef Executor (polyobject)";

		480
		{
			title = "Door Slide";
			prefix = "(480)";
		}
		481
		{
			title = "Door Swing";
			prefix = "(481)";
		}
		482
		{
			title = "Move";
			prefix = "(482)";
		}
		483
		{
			title = "Move, Override";
			prefix = "(483)";
		}
		484
		{
			title = "Rotate Right";
			prefix = "(484)";
		}
		485
		{
			title = "Rotate Right, Override";
			prefix = "(485)";
		}
		486
		{
			title = "Rotate Left";
			prefix = "(486)";
		}
		487
		{
			title = "Rotate Left, Override";
			prefix = "(487)";
		}
		488
		{
			title = "Move by Waypoints";
			prefix = "(488)";
		}
		489
		{
			title = "Turn Invisible, Intangible";
			prefix = "(489)";
		}
		490
		{
			title = "Turn Visible, Tangible";
			prefix = "(490)";
		}
		491
		{
			title = "Set Translucency";
			prefix = "(491)";
		}
		492
		{
			title = "Fade Translucency";
			prefix = "(492)";
		}
	}

	wallscroll
	{
		title = "Wall Scrolling";

		500
		{
			title = "Scroll Wall Front Side Left";
			prefix = "(500)";
		}
		501
		{
			title = "Scroll Wall Front Side Right";
			prefix = "(501)";
		}
		502
		{
			title = "Scroll Wall According to Linedef";
			prefix = "(502)";
		}
		503
		{
			title = "Scroll Wall According to Linedef (Accelerative)";
			prefix = "(503)";
		}
		504
		{
			title = "Scroll Wall According to Linedef (Displacement)";
			prefix = "(504)";
		}
		505
		{
			title = "Scroll Texture by Front Side Offsets";
			prefix = "(505)";
		}
		506
		{
			title = "Scroll Texture by Back Side Offsets";
			prefix = "(506)";
		}
	}

	planescroll
	{
		title = "Plane Scrolling";

		510
		{
			title = "Scroll Floor Texture";
			prefix = "(510)";
		}
		511
		{
			title = "Scroll Floor Texture (Accelerative)";
			prefix = "(511)";
		}
		512
		{
			title = "Scroll Floor Texture (Displacement)";
			prefix = "(512)";
		}
		513
		{
			title = "Scroll Ceiling Texture";
			prefix = "(513)";
		}
		514
		{
			title = "Scroll Ceiling Texture (Accelerative)";
			prefix = "(514)";
		}
		515
		{
			title = "Scroll Ceiling Texture (Displacement)";
			prefix = "(515)";
		}
		520
		{
			title = "Carry Objects on Floor";
			prefix = "(520)";
		}
		521
		{
			title = "Carry Objects on Floor (Accelerative)";
			prefix = "(521)";
		}
		522
		{
			title = "Carry Objects on Floor (Displacement)";
			prefix = "(522)";
		}
		523
		{
			title = "Carry Objects on Ceiling";
			prefix = "(523)";
		}
		524
		{
			title = "Carry Objects on Ceiling (Accelerative)";
			prefix = "(524)";
		}
		525
		{
			title = "Carry Objects on Ceiling (Displacement)";
			prefix = "(525)";
		}
		530
		{
			title = "Scroll Floor Texture and Carry Objects";
			prefix = "(530)";
		}
		531
		{
			title = "Scroll Floor Texture and Carry Objects (Accelerative)";
			prefix = "(531)";
		}
		532
		{
			title = "Scroll Floor Texture and Carry Objects (Displacement)";
			prefix = "(532)";
		}
		533
		{
			title = "Scroll Ceiling Texture and Carry Objects";
			prefix = "(533)";
		}
		534
		{
			title = "Scroll Ceiling Texture and Carry Objects (Accelerative)";
			prefix = "(534)";
		}
		535
		{
			title = "Scroll Ceiling Texture and Carry Objects (Displacement)";
			prefix = "(535)";
		}
	}

	pusher
	{
		title = "Pusher";

		541
		{
			title = "Wind";
			prefix = "(541)";
		}
		542
		{
			title = "Upwards Wind";
			prefix = "(542)";
		}
		543
		{
			title = "Downwards Wind";
			prefix = "(543)";
		}
		544
		{
			title = "Current";
			prefix = "(544)";
		}
		545
		{
			title = "Upwards Current";
			prefix = "(545)";
		}
		546
		{
			title = "Downwards Current";
			prefix = "(546)";
		}
		547
		{
			title = "Push/Pull";
			prefix = "(547)";
		}
	}

	light
	{
		title = "Lighting";

		600
		{
			title = "Floor Lighting";
			prefix = "(600)";
		}
		601
		{
			title = "Ceiling Lighting";
			prefix = "(601)";
		}
		602
		{
			title = "Adjustable Pulsating Light";
			prefix = "(602)";
		}
		603
		{
			title = "Adjustable Flickering Light";
			prefix = "(603)";
		}
		604
		{
			title = "Adjustable Blinking Light (unsynchronized)";
			prefix = "(604)";
		}
		605
		{
			title = "Adjustable Blinking Light (synchronized)";
			prefix = "(605)";
		}
		606
		{
			title = "Colormap";
			prefix = "(606)";
		}
	}

	slope
	{
		title = "Slope";

		700
		{
			title = "Slope Frontside Floor";
			prefix = "(700)";
		}
		701
		{
			title = "Slope Frontside Ceiling";
			prefix = "(701)";
		}
		702
		{
			title = "Slope Frontside Floor and Ceiling";
			prefix = "(702)";
		}
		703
		{
			title = "Slope Frontside Floor and Backside Ceiling";
			prefix = "(703)";
´		}
		704
		{
			title = "Slope Frontside Floor by 3 Tagged Vertex Things";
			prefix = "(704)";
		}
		705
		{
			title = "Slope Frontside Ceiling by 3 Tagged Vertex Things";
			prefix = "(705)";
		}
		710
		{
			title = "Slope Backside Floor";
			prefix = "(710)";
		}
		711
		{
			title = "Slope Backside Ceiling";
			prefix = "(711)";
		}
		712
		{
			title = "Slope Backside Floor and Ceiling";
			prefix = "(712)";
		}
		713
		{
			title = "Slope Backside Floor and Frontside Ceiling";
			prefix = "(713)";
		}
		714
		{
			title = "Slope Backside Floor by 3 Tagged Vertex Things";
			prefix = "(714)";
		}
		715
		{
			title = "Slope Backside Ceiling by 3 Tagged Vertex Things";
			prefix = "(715)";
		}
		720
		{
			title = "Copy Frontside Floor Slope from Line Tag";
			prefix = "(720)";
		}
		721
		{
			title = "Copy Frontside Ceiling Slope from Line Tag";
			prefix = "(721)";
		}
		722
		{
			title = "Copy Frontside Floor and Ceiling Slope from Line Tag";
			prefix = "(722)";
		}
		799
		{
			title = "Set Tagged Dynamic Slope Vertex to Front Sector Height";
			prefix = "(799)";
		}
	}

	transwall
	{
		title = "Translucent Wall";

		900
		{
			title = "90% Opaque";
			prefix = "(900)";
		}
		901
		{
			title = "80% Opaque";
			prefix = "(901)";
		}
		902
		{
			title = "70% Opaque";
			prefix = "(902)";
		}
		903
		{
			title = "60% Opaque";
			prefix = "(903)";
		}
		904
		{
			title = "50% Opaque";
			prefix = "(904)";
		}
		905
		{
			title = "40% Opaque";
			prefix = "(905)";
		}
		906
		{
			title = "30% Opaque";
			prefix = "(906)";
		}
		907
		{
			title = "20% Opaque";
			prefix = "(907)";
		}
		908
		{
			title = "10% Opaque";
			prefix = "(908)";
		}
		909
		{
			title = "Fog Wall";
			prefix = "(909)";
		}
		910
		{
			title = "100% Additive";
			prefix = "(910)";
		}
		911
		{
			title = "90% Additive";
			prefix = "(911)";
		}
		912
		{
			title = "80% Additive";
			prefix = "(912)";
		}
		913
		{
			title = "70% Additive";
			prefix = "(913)";
		}
		914
		{
			title = "60% Additive";
			prefix = "(914)";
		}
		915
		{
			title = "50% Additive";
			prefix = "(915)";
		}
		916
		{
			title = "40% Additive";
			prefix = "(916)";
		}
		917
		{
			title = "30% Additive";
			prefix = "(917)";
		}
		918
		{
			title = "20% Additive";
			prefix = "(918)";
		}
		919
		{
			title = "10% Additive";
			prefix = "(919)";
		}
		920
		{
			title = "100% Subtractive";
			prefix = "(920)";
		}
		921
		{
			title = "90% Subtractive";
			prefix = "(921)";
		}
		922
		{
			title = "80% Subtractive";
			prefix = "(922)";
		}
		923
		{
			title = "70% Subtractive";
			prefix = "(923)";
		}
		924
		{
			title = "60% Subtractive";
			prefix = "(924)";
		}
		925
		{
			title = "50% Subtractive";
			prefix = "(925)";
		}
		926
		{
			title = "40% Subtractive";
			prefix = "(926)";
		}
		927
		{
			title = "30% Subtractive";
			prefix = "(927)";
		}
		928
		{
			title = "20% Subtractive";
			prefix = "(928)";
		}
		929
		{
			title = "10% Subtractive";
			prefix = "(929)";
		}
		930
		{
			title = "100% Reverse Subtractive";
			prefix = "(930)";
		}
		931
		{
			title = "90% Reverse Subtractive";
			prefix = "(931)";
		}
		932
		{
			title = "80% Reverse Subtractive";
			prefix = "(932)";
		}
		933
		{
			title = "70% Reverse Subtractive";
			prefix = "(933)";
		}
		934
		{
			title = "60% Reverse Subtractive";
			prefix = "(934)";
		}
		935
		{
			title = "50% Reverse Subtractive";
			prefix = "(935)";
		}
		936
		{
			title = "40% Reverse Subtractive";
			prefix = "(936)";
		}
		937
		{
			title = "30% Reverse Subtractive";
			prefix = "(937)";
		}
		938
		{
			title = "20% Reverse Subtractive";
			prefix = "(938)";
		}
		939
		{
			title = "10% Reverse Subtractive";
			prefix = "(939)";
		}
		940
		{
			title = "Modulate";
			prefix = "(940)";
		}
	}
}

udmf
{
	misc
	{
		title = "Miscellaneous";

		0
		{
			title = "None";
			prefix = "(0)";
		}

		7
		{
			title = "Sector Flat Alignment";
			prefix = "(7)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
				default = 2;
			}
		}

		10
		{
			title = "Culling Plane";
			prefix = "(10)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Culling behavior";
				type = 11;
				enum
				{
					0 = "Always";
					1 = "Only while in sector";
				}
			}
		}

		40
		{
			title = "Visual Portal Between Tagged Linedefs";
			prefix = "(40)";
		}

		41
		{
			title = "Horizon Effect";
			prefix = "(41)";
		}

		63
		{
			title = "Fake Floor/Ceiling Planes";
			prefix = "(63)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}
	}

	parameters
	{
		title = "Parameters";

		2
		{
			title = "Custom Exit";
			prefix = "(2)";
			arg0
			{
				title = "Next map";
			}
			arg1
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Skip score tally";
					2 = "Check emeralds";
				}
			}
			arg2
			{
				title = "Next map (all emeralds)";
			}
		}

		3
		{
			title = "Zoom Tube Parameters";
			prefix = "(3)";
			arg0
			{
				title = "Speed";
			}
			arg1
			{
				title = "Sequence";
			}
			arg2
			{
				title = "Check player direction?";
				type = 11;
				enum = "yesno";
			}
		}

		4
		{
			title = "Speed Pad Parameters";
			prefix = "(4)";
			arg0
			{
				title = "Speed";
			}
			arg1
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "No teleport to center";
					2 = "Force spinning frames";
				}
			}
			stringarg0
			{
				title = "Sound";
				type = 2;
			}
		}

		8
		{
			title = "Set Camera Collision Planes";
			prefix = "(8)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		11
		{
			title = "Rope Hang Parameters";
			prefix = "(11)";
			arg0
			{
				title = "Speed";
			}
			arg1
			{
				title = "Sequence";
			}
			arg2
			{
				title = "Loop?";
				type = 11;
				enum = "yesno";
			}
		}

		14
		{
			title = "Bustable Block Parameters";
			prefix = "(14)";
			arg0
			{
				title = "Debris spacing";
			}
			arg1
			{
				title = "Debris lifetime";
			}
			arg2
			{
				title = "Launch from center?";
				type = 11;
				enum = "noyes";
			}
			stringarg0
			{
				title = "Debris object type";
				type = 2;
			}
		}

		15
		{
			title = "Fan Particle Generator Heights";
			prefix = "(15)";
		}

		16
		{
			title = "Minecart Parameters";
			prefix = "(16)";
			arg0
			{
				title = "Order";
			}
		}

		64
		{
			title = "Continuously Appearing/Disappearing FOF";
			prefix = "(64)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Control sector tag";
				type = 13;
			}
			arg2
			{
				title = "On time";
			}
			arg3
			{
				title = "Off time";
			}
			arg4
			{
				title = "Initial delay";
			}
			arg5
			{
				title = "Play sound?";
				type = 11;
				enum = "yesno";
			}
		}
	}

	polyobject
	{
		title = "PolyObject";

		20
		{
			title = "First Line";
			prefix = "(20)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Parent ID";
				type = 14;
			}
			arg2
			{
				title = "Translucency";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Don't render insides";
					2 = "Intangible";
					4 = "Stopped by pushables";
					8 = "Don't render planes";
					16 = "Trigger linedef executor on touch";
					32 = "Crush player";
					64 = "Cut cyan flat pixels";
				}
			}
			arg4
			{
				title = "Trigger linedef tag";
				type = 15;
			}
		}

		30
		{
			title = "Waving Flag";
			prefix = "(30)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Distance";
			}
		}

		31
		{
			title = "Displacement by Front Sector";
			prefix = "(31)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Base speed";
			}
		}

		32
		{
			title = "Angular Displacement by Front Sector";
			prefix = "(32)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Plane factor";
				default = 128;
			}
			arg2
			{
				title = "Rotation factor";
				default = 90;
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Don't turn others";
					2 = "Turn players";
				}
			}
		}
	}

	planemove
	{
		title = "Plane Movement";

		52
		{
			title = "Continuously Falling Sector";
			prefix = "(52)";
			arg0
			{
				title = "Speed";
			}
			arg1
			{
				title = "Direction";
				type = 11;
				enum
				{
					0 = "Fall";
					1 = "Rise";
				}
			}
		}

		53
		{
			title = "Continuous Plane Mover (Slowdown)";
			prefix = "(53)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Forward speed";
			}
			arg3
			{
				title = "Return speed";
			}
			arg4
			{
				title = "Starting delay";
			}
			arg5
			{
				title = "Delay before flip";
			}
		}

		56
		{
			title = "Continuous Plane Mover (Constant)";
			prefix = "(56)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Forward speed";
			}
			arg3
			{
				title = "Return speed";
			}
			arg4
			{
				title = "Starting delay";
			}
			arg5
			{
				title = "Delay before flip";
			}
		}

		60
		{
			title = "Activate Moving Platform";
			prefix = "(60)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Starting delay";
			}
			arg3
			{
				title = "Delay before flip";
			}
			arg4
			{
				title = "Starting direction";
				type = 11;
				enum = "downup";
			}
		}

		61
		{
			title = "Ceiling Crusher";
			prefix = "(61)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Starting direction";
				type = 11;
				enum
				{
					0 = "Crush";
					1 = "Retract";
				}
			}
			arg2
			{
				title = "Crush speed";
			}
			arg3
			{
				title = "Retract speed";
			}
		}

		66
		{
			title = "Move Planes by Displacement";
			prefix = "(66)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Translation factor";
				default = 256;
			}
		}
	}

	fofmodifiers
	{
		title = "FOF Modifiers";

		70
		{
			title = "Add Raise Thinker";
			prefix = "(70)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Destination height";
			}
			arg3
			{
				title = "Require spindash?";
				type = 11;
				enum = "noyes";
			}
		}

		71
		{
			title = "Add Air Bobbing Thinker";
			prefix = "(71)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Bobbing distance";
			}
			arg2
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Raise";
					2 = "Require spindash";
					4 = "Dynamic";
				}
			}
		}

		72
		{
			title = "Add Thwomp Thinker";
			prefix = "(72)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Falling speed";
			}
			arg2
			{
				title = "Rising speed";
			}
			stringarg0
			{
				title = "Crushing sound";
				type = 2;
			}
		}

		73
		{
			title = "Add Laser Thinker";
			prefix = "(73)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Damage bosses?";
				type = 11;
				enum = "yesno";
			}
		}

		74
		{
			title = "Make FOF Bustable";
			prefix = "(74)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Bustable type";
				type = 11;
				enum
				{
					0 = "Touch";
					1 = "Spin";
					2 = "Regular";
					3 = "Strong";
				}
			}
			arg2
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Bustable by pushables";
					2 = "Trigger linedef executor";
					4 = "Only bustable from below";
				}
			}
			arg3
			{
				title = "Linedef executor tag";
				type = 15;
			}
		}

		75
		{
			title = "Make FOF Quicksand";
			prefix = "(75)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Sinking speed";
			}
			arg2
			{
				title = "Friction";
			}
		}

		76
		{
			title = "Make FOF Bouncy";
			prefix = "(76)";
			arg0
			{
				title = "Control linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Bounce strength";
			}
		}
	}

	fof
	{
		title = "FOF";

		100
		{
			title = "Solid";
			prefix = "(100)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 255;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Appearance";
				type = 12;
				enum
				{
					1 = "Don't render planes";
					2 = "Don't render sides";
					4 = "Render insides";
					8 = "Render only insides";
					16 = "No shadow";
					32 = "Cut cyan flat pixels";
				}
			}
			arg4
			{
				title = "Tangibility";
				type = 12;
				enum = "tangibility";
			}
		}

		120
		{
			title = "Water";
			prefix = "(120)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 128;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Don't render sides";
					2 = "Render separate light level";
					4 = "Use target light level";
					8 = "No ripple effect";
					16 = "Goo physics";
					32 = "Cut cyan flat pixels";
				}
			}
		}

		150
		{
			title = "Air Bobbing";
			prefix = "(150)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Bobbing distance";
			}
			arg2
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Raise";
					2 = "Require spindash";
					4 = "Dynamic";
				}
			}
		}

		160
		{
			title = "Water Bobbing";
			prefix = "(160)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		170
		{
			title = "Crumbling";
			prefix = "(170)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 255;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Tangibility";
				type = 12;
				enum = "tangibility";
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "No shadow";
					2 = "No respawn";
					4 = "Air bobbing";
					8 = "Float on water";
					16 = "Cut cyan flat pixels";
				}
			}
		}

		190
		{
			title = "Rising";
			prefix = "(190)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 255;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Appearance";
				type = 12;
				enum
				{
					1 = "Don't render planes";
					2 = "Don't render sides";
					4 = "Render insides";
					8 = "Render only insides";
					16 = "No shadow";
					32 = "Cut cyan flat pixels";
				}
			}
			arg4
			{
				title = "Tangibility";
				type = 12;
				enum = "tangibility";
			}
			arg5
			{
				title = "Speed";
			}
			arg6
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Lower";
					2 = "Require spindash";
				}
			}
		}

		200
		{
			title = "Light Block";
			prefix = "(200)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Expand to bottom?";
				type = 11;
				enum = "noyes";
			}
		}

		202
		{
			title = "Fog Block";
			prefix = "(202)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		220
		{
			title = "Intangible";
			prefix = "(220)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 255;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Appearance";
				type = 12;
				enum
				{
					1 = "Don't render planes";
					2 = "Don't render sides";
					4 = "Don't render insides";
					8 = "Render only insides";
					16 = "No shadow";
					32 = "Cut cyan flat pixels";
				}
			}
		}

		223
		{
			title = "Intangible, Invisible";
			prefix = "(223)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		250
		{
			title = "Mario Block";
			prefix = "(250)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Block type";
				type = 12;
				enum
				{
					1 = "Brick";
					2 = "Invisible";
				}
			}
		}

		251
		{
			title = "Thwomp Block";
			prefix = "(251)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Falling speed";
			}
			arg2
			{
				title = "Rising speed";
			}
			stringarg0
			{
				title = "Crushing sound";
				type = 2;
			}
		}

		254
		{
			title = "Bustable Block";
			prefix = "(254)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 255;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Bustable type";
				type = 11;
				enum
				{
					0 = "Touch";
					1 = "Spin";
					2 = "Regular";
					3 = "Strong";
				}
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Bustable by pushables";
					2 = "Trigger linedef executor";
					4 = "Only bustable from below";
					8 = "Cut cyan flat pixels";
				}
			}
			arg5
			{
				title = "Linedef executor tag";
				type = 15;
			}
		}

		257
		{
			title = "Quicksand";
			prefix = "(257)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Ripple effect?";
				type = 11;
				enum = "yesno";
			}
			arg2
			{
				title = "Sinking speed";
			}
			arg3
			{
				title = "Friction";
			}
		}

		258
		{
			title = "Laser";
			prefix = "(258)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 128;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Don't damage bosses";
					2 = "Cut cyan flat pixels";
				}
			}
		}

		259
		{
			title = "Custom";
			prefix = "(259)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Alpha";
				default = 255;
			}
			arg2
			{
				title = "Blending mode";
				type = 11;
				enum = "blendmodes";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Exists";
					2 = "Block player";
					4 = "Block others";
					8 = "Render sides";
					16 = "Render planes";
					32 = "Water";
					64 = "No shadow";
					128 = "Cut solid walls";
					256 = "Cut extra walls";
					512 = "Split sprites";
					1024 = "Render inside planes";
					2048 = "Extra";
					8192 = "Fog";
					16384 = "Only render inside planes";
					32768 = "Render inside walls";
					65536 = "Only render inside walls";
					131072 = "Double shadow";
					262144 = "Water bobbing";
					524288 = "Don't respawn";
					1048576 = "Crumbling";
					2097152 = "Goo water";
					4194304 = "Mario block";
					33554432 = "Intangible from below";
					67108864 = "Intangible from above";
					134217728 = "Ripple effect";
					268435456 = "Don't copy light level";
					536870912 = "Bouncy";
					1073741824 = "Cut cyan flat pixels";
				}
			}
		}
		260
		{
			title = "Generalized 3D Floor";
			prefix = "(260)";
			id = "Sector_Set3dFloor";
			requiresactivation = false;

			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Type";
				type = 26;
				default = 1;
				enum
				{
					1 = "Solid";
					2 = "Water";
					3 = "Intangible";
				}
				flags
				{
					4 = "Render insides";
					16 = "Only render insides";
				}
			}
			arg2
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "No shadow";
					2 = "Double shadow";
					4 = "Fog";
				}
			}
			arg3
			{
				title = "Alpha";
				default = 255;
			}
		}
	}

	linedeftrigger
	{
		title = "Linedef Executor Trigger";

		300
		{
			title = "Basic";
			prefix = "(300)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
		}

		303
		{
			title = "Ring Count";
			prefix = "(303)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Rings";
			}
			arg2
			{
				title = "Comparison";
				type = 11;
				enum = "comparison";
			}
			arg3
			{
				title = "Count all players?";
				type = 11;
				enum = "noyes";
			}
		}

		305
		{
			title = "Character Ability";
			prefix = "(305)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Ability";
				type = 11;
				enum
				{
					0 = "None";
					1 = "Thok";
					2 = "Fly";
					3 = "Glide and climb";
					4 = "Homing attack";
					5 = "Swim";
					6 = "Double jump";
					7 = "Float";
					8 = "Float with slow descent";
					9 = "Telekinesis";
					10 = "Fall switch";
					11 = "Jump boost";
					12 = "Air drill";
					13 = "Jump-thok";
					14 = "Pogo bounce";
					15 = "Twin spin";
				}
			}
		}

		308
		{
			title = "Gametype";
			prefix = "(308)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Rules";
				type = 12;
				enum
				{
					1 = "Campaign";
					2 = "Ringslinger";
					4 = "Spectators";
					8 = "Lives";
					16 = "Teams";
					32 = "First person";
					64 = "Match emeralds";
					128 = "Team flags";
					256 = "Coop";
					512 = "Allow special stages";
					1024 = "Spawn emerald tokens";
					2048 = "Emerald hunt";
					4096 = "Race";
					8192 = "Tag";
					16384 = "Point limit";
					32768 = "Time limit";
					65536 = "Overtime";
					131072 = "Hurt messages";
					262144 = "Friendly fire";
					524288 = "Hide time countdown";
					1048576 = "Frozen after hide time";
					2097152 = "Blindfolded view";
					4194304 = "Respawn delay";
					8388608 = "Award pity shield";
					16777216 = "Death score penalty";
					33554432 = "No spectator spawn";
					67108864 = "Use match starts";
					134217728 = "Spawn invincibility";
					268435456 = "Allow enemies";
					536870912 = "Allow exit sectors";
					1073741824 = "No title card";
					2147483648 = "Allow cutscenes";
				}
			}
			arg2
			{
				title = "Check if";
				type = 11;
				enum = "flagcheck";
			}
		}

		309
		{
			title = "CTF Team";
			prefix = "(309)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Team";
				type = 11;
				enum = "team";
			}
		}

		313
		{
			title = "No More Enemies";
			prefix = "(313)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		314
		{
			title = "Number of Pushables";
			prefix = "(314)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Pushables";
			}
			arg2
			{
				title = "Comparison";
				type = 11;
				enum = "comparison";
			}
		}

		317
		{
			title = "Condition Set Trigger";
			prefix = "(317)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Trigger ID";
			}
		}

		319
		{
			title = "Unlockable";
			prefix = "(319)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Unlockable ID";
			}
		}

		321
		{
			title = "Trigger After X Calls";
			prefix = "(321)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "xtriggertype";
			}
			arg1
			{
				title = "Calls";
			}
			arg2
			{
				title = "Can retrigger?";
				type = 11;
				enum = "noyes";
			}
			arg3
			{
				title = "Starting calls";
			}
		}

		323
		{
			title = "NiGHTSerize";
			prefix = "(323)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum
				{
					0 = "Each time";
					1 = "Once";
				}
			}
			arg1
			{
				title = "Mare number";
			}
			arg2
			{
				title = "Lap number";
			}
			arg3
			{
				title = "Mare comparison";
				type = 11;
				enum = "comparison";
			}
			arg4
			{
				title = "Lap comparison";
				type = 11;
				enum = "comparison";
			}
			arg5
			{
				title = "Compared player";
				type = 11;
				enum
				{
					0 = "Fastest";
					1 = "Slowest";
					2 = "Triggerer";
				}
			}
			arg6
			{
				title = "NiGHTS check";
				type = 11;
				enum
				{
					0 = "No check";
					1 = "Trigger if player was not NiGHTS";
					2 = "Trigger if player was already NiGHTS";
				}
			}
			arg7
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Only count bonus time laps";
					2 = "Only trigger if final mare completed";
				}
			}
		}
		325
		{
			title = "De-NiGHTSerize";
			prefix = "(325)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum
				{
					0 = "Each time";
					1 = "Once";
				}
			}
			arg1
			{
				title = "Mare number";
			}
			arg2
			{
				title = "Lap number";
			}
			arg3
			{
				title = "Mare comparison";
				type = 11;
				enum = "comparison";
			}
			arg4
			{
				title = "Lap comparison";
				type = 11;
				enum = "comparison";
			}
			arg5
			{
				title = "Compared player";
				type = 11;
				enum
				{
					0 = "Fastest";
					1 = "Slowest";
					2 = "Triggerer";
				}
			}
			arg6
			{
				title = "NiGHTS check";
				type = 11;
				enum
				{
					0 = "No check";
					1 = "Trigger if nobody is now NiGHTS";
					2 = "Trigger if somebody is still NiGHTS";
				}
			}
			arg7
			{
				title = "Only bonus laps?";
				type = 11;
				enum = "noyes";
			}
		}
		327
		{
			title = "NiGHTS Lap";
			prefix = "(327)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum
				{
					0 = "Each time";
					1 = "Once";
				}
			}
			arg1
			{
				title = "Mare number";
			}
			arg2
			{
				title = "Lap number";
			}
			arg3
			{
				title = "Mare comparison";
				type = 11;
				enum = "comparison";
			}
			arg4
			{
				title = "Lap comparison";
				type = 11;
				enum = "comparison";
			}
			arg5
			{
				title = "Compared player";
				type = 11;
				enum
				{
					0 = "Fastest";
					1 = "Slowest";
					2 = "Triggerer";
				}
			}
			arg6
			{
				title = "Only bonus laps?";
				type = 11;
				enum = "noyes";
			}
		}
		329
		{
			title = "Ideya Capture Touch";
			prefix = "(329)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum
				{
					0 = "Each time";
					1 = "Once";
				}
			}
			arg1
			{
				title = "Mare number";
			}
			arg2
			{
				title = "Lap number";
			}
			arg3
			{
				title = "Mare comparison";
				type = 11;
				enum = "comparison";
			}
			arg4
			{
				title = "Lap comparison";
				type = 11;
				enum = "comparison";
			}
			arg5
			{
				title = "Compared player";
				type = 11;
				enum
				{
					0 = "Fastest";
					1 = "Slowest";
					2 = "Triggerer";
				}
			}
			arg6
			{
				title = "Spheres check";
				type = 11;
				enum
				{
					0 = "Trigger if enough spheres";
					1 = "Trigger if not enough spheres";
					2 = "Trigger regardless of spheres";
				}
			}
			arg7
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Only count bonus time laps";
					2 = "Trigger upon entering Ideya Capture";
				}
			}
		}

		331
		{
			title = "Player Skin";
			prefix = "(331)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Invert choice?";
				type = 11;
				enum = "noyes";
			}
			stringarg0
			{
				title = "Skin name";
				type = 2;
			}
		}

		334
		{
			title = "Object Dye";
			prefix = "(334)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Invert choice?";
				type = 11;
				enum = "noyes";
			}
			stringarg0
			{
				title = "Color";
				type = 2;
			}
		}

		337
		{
			title = "Emerald Check";
			prefix = "(337)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Emeralds";
				type = 12;
				enum
				{
					1 = "Emerald 1";
					2 = "Emerald 2";
					4 = "Emerald 3";
					8 = "Emerald 4";
					16 = "Emerald 5";
					32 = "Emerald 6";
					64 = "Emerald 7";
				}
			}
			arg2
			{
				title = "Check if";
				type = 11;
				enum = "flagcheck";
			}
		}

		340
		{
			title = "NiGHTS Mare";
			prefix = "(340)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Mare";
			}
			arg2
			{
				title = "Comparison";
				type = 11;
				enum = "comparison";
			}
		}

		343
		{
			title = "Gravity Check";
			prefix = "(343)";
			arg0
			{
				title = "Trigger type";
				type = 11;
				enum = "triggertype";
			}
			arg1
			{
				title = "Gravity";
				type = 11;
				enum
				{
					0 = "Normal gravity";
					1 = "Reverse gravity";
					2 = "Reverse gravity (no MF2_OBJECTFLIP)";
				}
			}
		}

		399
		{
			title = "Level Load";
			prefix = "(399)";
		}
	}

	linedefexecsector
	{
		title = "Linedef Executor (sector)";

		400
		{
			title = "Set Tagged Sector's Heights/Textures";
			prefix = "(400)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Set flats?";
				type = 11;
				enum = "noyes";
			}
		}

		402
		{
			title = "Copy Light Level to Tagged Sectors";
			prefix = "(402)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Don't copy main light level";
					2 = "Don't copy floor light level";
					4 = "Don't copy ceiling light level";
				}
			}
		}

		408
		{
			title = "Set Tagged Sector's Flats";
			prefix = "(408)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
		}

		409
		{
			title = "Change Tagged Sector's Tag";
			prefix = "(409)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Tag";
				type = 13;
			}
			arg2
			{
				title = "Behavior";
				type = 11;
				enum
				{
					0 = "Add tag";
					1 = "Remove tag";
					2 = "Replace first tag";
					3 = "Change trigger tag";
				}
			}
		}

		410
		{
			title = "Change Front Sector's Tag";
			prefix = "(410)";
			arg0
			{
				title = "Tag";
				type = 13;
			}
			arg1
			{
				title = "Behavior";
				type = 11;
				enum
				{
					0 = "Add tag";
					1 = "Remove tag";
					2 = "Replace first tag";
					3 = "Change trigger tag";
				}
			}
		}

		416
		{
			title = "Start Adjustable Flickering Light";
			prefix = "(416)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Brightness 1";
			}
			arg3
			{
				title = "Use target brightness?";
				type = 11;
				enum = "noyes";
			}
			arg4
			{
				title = "Brightness 2";
			}
		}

		417
		{
			title = "Start Adjustable Pulsating Light";
			prefix = "(417)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Brightness 1";
			}
			arg3
			{
				title = "Use target brightness?";
				type = 11;
				enum = "noyes";
			}
			arg4
			{
				title = "Brightness 2";
			}
		}

		418
		{
			title = "Start Adjustable Blinking Light";
			prefix = "(418)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Brightness 1 tics";
			}
			arg2
			{
				title = "Brightness 2 tics";
			}
			arg3
			{
				title = "Brightness 1";
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Use target brightness";
					2 = "Synchronized";
				}
			}
			arg5
			{
				title = "Brightness 2";
			}
		}

		420
		{
			title = "Fade Light Level";
			prefix = "(420)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Destination light level";
			}
			arg2
			{
				title = "Fading speed";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Add to current light level";
					2 = "Interrupt ongoing fades";
					4 = "Speed is duration";
				}
			}
		}

		421
		{
			title = "Stop Lighting Effect";
			prefix = "(421)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		435
		{
			title = "Change Plane Scroller Direction";
			prefix = "(435)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Speed";
			}
		}

		467
		{
			title = "Set Tagged Sector's Light Level";
			prefix = "(467)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Light level";
			}
			arg2
			{
				title = "Affected area";
				type = 11;
				enum
				{
					0 = "Sector";
					1 = "Floor";
					2 = "Ceiling";
				}
			}
			arg3
			{
				title = "Set/Add?";
				type = 11;
				enum = "setadd";
			}
		}

		469
		{
			title = "Change Tagged Sector's Gravity";
			prefix = "(469)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Set/Multiply?";
				type = 11;
				enum
				{
					0 = "Set";
					1 = "Multiply";
				}
			}
			arg2
			{
				title = "Flip flag";
				type = 11;
				enum
				{
					0 = "Don't change";
					1 = "Set";
					2 = "Remove";
				}
			}
			arg3
			{
				title = "Override gravity?";
				type = 11;
				enum
				{
					0 = "No";
					1 = "Yes";
				}
			}
			stringarg0
			{
				title = "Gravity value";
				type = 2;
			}
		}
	}

	linedefexecplane
	{
		title = "Linedef Executor (plane movement)";

		403
		{
			title = "Move Tagged Sector's Planes";
			prefix = "(403)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Speed";
			}
			arg3
			{
				title = "Linedef executor tag";
				type = 15;
			}
			arg4
			{
				title = "Set flats?";
				type = 11;
				enum = "noyes";
			}
		}

		405
		{
			title = "Move Planes by Distance";
			prefix = "(405)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Distance";
			}
			arg3
			{
				title = "Speed";
			}
			arg4
			{
				title = "Instant?";
				type = 11;
				enum = "noyes";
			}
		}

		411
		{
			title = "Stop Plane Movement";
			prefix = "(411)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		428
		{
			title = "Start Platform Movement";
			prefix = "(428)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Starting delay";
			}
			arg3
			{
				title = "Delay before flip";
			}
			arg4
			{
				title = "Starting direction";
				type = 11;
				enum
				{
					0 = "Down";
					1 = "Up";
				}
			}
		}

		429
		{
			title = "Crush Planes Once";
			prefix = "(429)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Crush speed";
			}
			arg3
			{
				title = "Retract speed";
			}
		}
	}

	linedefexecplayer
	{
		title = "Linedef Executor (player/object)";

		412
		{
			title = "Teleporter";
			prefix = "(412)";
			arg0
			{
				title = "Destination tag";
				type = 14;
			}
			arg1
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Silent";
					2 = "Keep angle";
					4 = "Keep momentum";
					8 = "Relative silent";
				}
			}
			arg2
			{
				title = "X offset";
			}
			arg3
			{
				title = "Y offset";
			}
			arg4
			{
				title = "Z offset";
			}
		}

		425
		{
			title = "Change Object State";
			prefix = "(425)";
			stringarg0
			{
				title = "State";
				type = 2;
			}
		}

		426
		{
			title = "Stop Object";
			prefix = "(426)";
			arg0
			{
				title = "Move to center?";
				type = 11;
				enum = "noyes";
			}
		}

		427
		{
			title = "Award Score";
			prefix = "(427)";
			arg0
			{
				title = "Score";
			}
		}

		432
		{
			title = "Enable/Disable 2D Mode";
			prefix = "(432)";
			arg0
			{
				title = "Mode";
				type = 11;
				enum
				{
					0 = "2D";
					1 = "3D";
				}
			}
		}

		433
		{
			title = "Enable/Disable Gravity Flip";
			prefix = "(433)";
			arg0
			{
				title = "Set gravity";
				type = 11;
				enum
				{
					0 = "Reverse";
					1 = "Normal";
				}
			}
			arg1
			{
				title = "Invert current gravity";
				type = 11;
				enum
				{
					0 = "No";
					1 = "Yes";
				}
			}
			arg2
			{
				title = "Force MFE_VERTICALFLIP";
				type = 11;
				enum
				{
					0 = "No";
					1 = "Yes";
				}
			}
		}

		434
		{
			title = "Award Power-Up";
			prefix = "(434)";
			stringarg0
			{
				title = "Power";
				type = 2;
			}
			stringarg1
			{
				title = "Duration/Amount";
				type = 2;
			}
		}

		437
		{
			title = "Disable Player Control";
			prefix = "(437)";
			arg0
			{
				title = "Time";
			}
			arg1
			{
				title = "Allow jumping?";
				type = 11;
				enum = "noyes";
			}
		}

		438
		{
			title = "Change Object Size";
			prefix = "(438)";
			arg0
			{
				title = "Size (%)";
				default = 100;
			}
		}

		442
		{
			title = "Change Object Type State";
			prefix = "(442)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Change to";
				type = 11;
				enum
				{
					0 = "Specified state";
					1 = "Next state";
				}
			}
			stringarg0
			{
				title = "Object type";
				type = 2;
			}
			stringarg1
			{
				title = "State";
				type = 2;
			}
		}

		457
		{
			title = "Track Object's Angle";
			prefix = "(457)";
			arg0
			{
				title = "Anchor tag";
				type = 14;
			}
			arg1
			{
				title = "Angle tolerance";
				type = 8;
			}
			arg2
			{
				title = "Time tolerance";
			}
			arg3
			{
				title = "Trigger linedef tag";
				type = 15;
			}
			arg4
			{
				title = "Track after failure?";
				type = 11;
				enum = "noyes";
			}
		}

		458
		{
			title = "Stop Tracking Object's Angle";
			prefix = "(458)";
		}

		460
		{
			title = "Award Rings";
			prefix = "(460)";
			arg0
			{
				title = "Rings";
			}
			arg1
			{
				title = "Periodicity";
			}
		}

		461
		{
			title = "Spawn Object";
			prefix = "(461)";
			arg0
			{
				title = "X position";
			}
			arg1
			{
				title = "Y position";
			}
			arg2
			{
				title = "Z position";
			}
			arg3
			{
				title = "Angle";
				type = 8;
			}
			arg4
			{
				title = "Randomize position?";
				type = 11;
				enum = "noyes";
			}
			arg5
			{
				title = "Max X position";
			}
			arg6
			{
				title = "Max Y position";
			}
			arg7
			{
				title = "Max Z position";
			}
			stringarg0
			{
				title = "Object type";
				type = 2;
			}
		}

		462
		{
			title = "Stop Timer/Exit Stage in Record Attack";
			prefix = "(462)";
		}

		463
		{
			title = "Dye Object";
			prefix = "(463)";
			stringarg0
			{
				title = "Skin color";
				type = 2;
			}
		}

		464
		{
			title = "Trigger Egg Capsule";
			prefix = "(464)";
			arg0
			{
				title = "Egg Capsule tag";
				type = 14;
			}
			arg1
			{
				title = "End level?";
				type = 11;
				enum = "yesno";
			}
		}

		466
		{
			title = "Set Level Failure State";
			prefix = "(466)";
			arg0
			{
				title = "State";
				type = 11;
				enum
				{
					0 = "Failure";
					1 = "Success";
				}
			}
		}
	}

	linedefexecmisc
	{
		title = "Linedef Executor (misc.)";

		413
		{
			title = "Change Music";
			prefix = "(413)";
			arg0
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "For all players";
					2 = "Seek offset from current position";
					4 = "Fade to custom volume";
					8 = "Don't reload after death";
					16 = "Force music reload";
					32 = "Don't loop";
				}
			}
			arg1
			{
				title = "Position";
			}
			arg2
			{
				title = "Fade out time";
			}
			arg3
			{
				title = "Fade in time";
			}
			arg4
			{
				title = "Fade destination volume";
			}
			arg5
			{
				title = "Fade start volume";
				default = -1;
			}
			arg6
			{
				title = "Track number";
			}
			stringarg0
			{
				title = "Music name";
				type = 2;
			}
		}

		414
		{
			title = "Play Sound Effect";
			prefix = "(414)";
			arg0
			{
				title = "Source";
				type = 11;
				enum
				{
					0 = "Triggering object";
					1 = "Trigger sector";
					2 = "Nowhere";
					3 = "Tagged sectors";
				}
			}
			arg1
			{
				title = "Listener";
				type = 11;
				enum
				{
					0 = "Triggering player";
					1 = "Everyone";
					2 = "Everyone touching tagged sectors";
				}
			}
			arg2
			{
				title = "Target sector tag";
				type = 13;
			}
			stringarg0
			{
				title = "Sound name";
				type = 2;
			}
		}

		415
		{
			title = "Run Script";
			prefix = "(415)";
			stringarg0
			{
				title = "Lump name";
				type = 2;
			}
		}

		422
		{
			title = "Switch to Cut-Away View";
			prefix = "(422)";
			arg0
			{
				title = "Viewpoint tag";
				type = 14;
			}
			arg1
			{
				title = "Time";
			}
		}

		423
		{
			title = "Change Sky";
			prefix = "(423)";
			arg0
			{
				title = "Sky number";
			}
			arg1
			{
				title = "For all players?";
				type = 11;
				enum = "noyes";
			}
		}

		424
		{
			title = "Change Weather";
			prefix = "(424)";
			arg0
			{
				title = "Weather";
				type = 11;
				enum
				{
					0 = "None";
					1 = "Storm (thunder, lightning and rain)";
					2 = "Snow";
					3 = "Rain";
					4 = "Preloaded";
					5 = "Storm (no rain)";
					6 = "Storm (no lightning)";
				}
			}
			arg1
			{
				title = "For all players?";
				type = 11;
				enum = "noyes";
			}
		}

		436
		{
			title = "Shatter FOF";
			prefix = "(436)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Control sector tag";
				type = 13;
			}
		}

		439
		{
			title = "Change Tagged Linedef's Textures";
			prefix = "(439)";
			arg0
			{
				title = "Target linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Affected sides";
				type = 11;
				enum = "frontbackboth";
			}
			arg2
			{
				title = "Change unset textures?";
				type = 11;
				enum = "yesno";
			}
			arg3
			{
				title = "Use backside textures?";
				type = 11;
				enum = "noyes";
			}
		}

		440
		{
			title = "Start Metal Sonic Race";
			prefix = "(440)";
		}

		441
		{
			title = "Condition Set Trigger";
			prefix = "(441)";
			arg0
			{
				title = "Trigger number";
			}
		}

		443
		{
			title = "Call Lua Function";
			prefix = "(443)";
			stringarg0
			{
				title = "Function name";
				type = 2;
			}
		}

		444
		{
			title = "Earthquake";
			prefix = "(444)";
			arg0
			{
				title = "Duration";
			}
			arg1
			{
				title = "Intensity";
			}
		}

		445
		{
			title = "Make FOF Disappear/Reappear";
			prefix = "(445)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Control sector tag";
				type = 13;
			}
			arg2
			{
				title = "Effect";
				type = 11;
				enum
				{
					0 = "Disappear";
					1 = "Reappear";
				}
			}
		}

		446
		{
			title = "Make FOF Crumble";
			prefix = "(446)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Control sector tag";
				type = 13;
			}
			arg2
			{
				title = "Respawn?";
				type = 11;
				enum
				{
					0 = "Yes";
					1 = "No";
					2 = "Unless FF_NORETURN";
					3 = "Only if FF_NORETURN";
				}
			}
		}

		447
		{
			title = "Change Tagged Sector's Colormap";
			prefix = "(447)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Colormap sector tag";
				type = 13;
			}
			arg2
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Add to existing colormap";
					2 = "Subtract light R";
					4 = "Subtract light G";
					8 = "Subtract light B";
					16 = "Subtract light A";
					32 = "Subtract fade R";
					64 = "Subtract fade G";
					128 = "Subtract fade B";
					256 = "Subtract fade A";
					512 = "Subtract fadestart";
					1024 = "Subtract fadeend";
					2048 = "Ignore flags";
				}
			}
		}

		448
		{
			title = "Change Skybox";
			prefix = "(448)";
			arg0
			{
				title = "Viewpoint ID";
			}
			arg1
			{
				title = "Centerpoint ID";
			}
			arg2
			{
				title = "Change?";
				type = 11;
				enum
				{
					0 = "Viewpoint";
					1 = "Centerpoint";
					2 = "Both";
				}
			}
			arg3
			{
				title = "For all players?";
				type = 11;
				enum = "noyes";
			}
		}

		449
		{
			title = "Enable Bosses with Parameter";
			prefix = "(449)";
			arg0
			{
				title = "Boss ID";
			}
			arg1
			{
				title = "Effect";
				type = 11;
				enum
				{
					0 = "Enable";
					1 = "Disable";
				}
			}
		}

		450
		{
			title = "Execute Linedef Executor (specific tag)";
			prefix = "(450)";
			arg0
			{
				title = "Trigger linedef tag";
				type = 15;
			}
		}

		451
		{
			title = "Execute Linedef Executor (random tag in range)";
			prefix = "(451)";
			arg0
			{
				title = "Start of tag range";
				type = 15;
			}
			arg1
			{
				title = "End of tag range";
				type = 15;
			}
		}

		452
		{
			title = "Set FOF Translucency";
			prefix = "(452)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Control sector tag";
				type = 13;
			}
			arg2
			{
				title = "Alpha";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Add to current translucency";
					2 = "Don't handle FF_TRANSLUCENT";
				}
			}
		}

		453
		{
			title = "Fade FOF";
			prefix = "(453)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Control sector tag";
				type = 13;
			}
			arg2
			{
				title = "Alpha";
			}
			arg3
			{
				title = "Fading speed";
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Add to current translucency";
					2 = "Interrupt ongoing fades";
					4 = "Speed is duration";
					8 = "Don't change collision";
					16 = "No collision during fade";
					32 = "Don't handle FF_TRANSLUCENT";
					64 = "Don't handle FF_EXISTS";
					128 = "Don't fade lighting";
					256 = "Don't fade colormap";
					512 = "Use exact alpha in OpenGL";
				}
			}
		}

		454
		{
			title = "Stop Fading FOF";
			prefix = "(454)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Control sector tag";
				type = 13;
			}
			arg2
			{
				title = "Finalize collision?";
				type = 11;
				enum = "yesno";
			}
		}

		455
		{
			title = "Fade Tagged Sector's Colormap";
			prefix = "(455)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Colormap sector tag";
				type = 13;
			}
			arg2
			{
				title = "Fade duration";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Add to existing colormap";
					2 = "Subtract light R";
					4 = "Subtract light G";
					8 = "Subtract light B";
					16 = "Subtract light A";
					32 = "Subtract fade R";
					64 = "Subtract fade G";
					128 = "Subtract fade B";
					256 = "Subtract fade A";
					512 = "Subtract fadestart";
					1024 = "Subtract fadeend";
					2048 = "Ignore flags";
					4096 = "Fade from invisible black";
					8192 = "Interrupt ongoing fades";
				}
			}
		}

		456
		{
			title = "Stop Fading Tagged Sector's Colormap";
			prefix = "(456)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
		}

		459
		{
			title = "Control Text Prompt";
			prefix = "(459)";
			arg0
			{
				title = "Prompt number";
			}
			arg1
			{
				title = "Page number";
			}
			arg2
			{
				title = "Flags";
				type = 11;
				enum
				{
					1 = "Close current text prompt";
					2 = "Trigger linedef executor on close";
					4 = "Find prompt by name";
					8 = "Don't disable controls";
				}
			}
			arg3
			{
				title = "Trigger linedef tag";
				type = 15;
			}
			stringarg0
			{
				title = "Prompt name";
				type = 2;
			}
		}

		465
		{
			title = "Set Linedef Executor Delay";
			prefix = "(465)";
			arg0
			{
				title = "Linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Value";
			}
			arg2
			{
				title = "Set/Add?";
				type = 11;
				enum = "setadd";
			}
		}

		468
		{
			title = "Change Linedef Argument";
			prefix = "(468)";
			arg0
			{
				title = "Linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Argument";
			}
			arg2
			{
				title = "Value";
			}
			arg3
			{
				title = "Set/Add?";
				type = 11;
				enum = "setadd";
			}
		}
	}

	linedefexecpoly
	{
		title = "Linedef Executor (polyobject)";

		480
		{
			title = "Door Slide";
			prefix = "(480)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Distance";
			}
			arg3
			{
				title = "Return delay";
			}
		}

		481
		{
			title = "Door Swing";
			prefix = "(481)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Rotation";
				type = 8;
			}
			arg3
			{
				title = "Return delay";
			}
		}

		482
		{
			title = "Move";
			prefix = "(482)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Distance";
			}
			arg3
			{
				title = "Override?";
				type = 11;
				enum = "noyes";
			}
		}

		484
		{
			title = "Rotate";
			prefix = "(484)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Rotation";
				type = 8;
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Don't turn others";
					2 = "Turn players";
					4 = "Continuous rotation";
					8 = "Override";
				}
			}
		}

		488
		{
			title = "Move by Waypoints";
			prefix = "(488)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Waypoint sequence";
			}
			arg3
			{
				title = "Return behavior";
				type = 11;
				enum
				{
					0 = "Don't return";
					1 = "Return to first waypoint";
					2 = "Repeat sequence in reverse";
				}
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Move in reverse";
					2 = "Loop movement";
				}
			}
		}

		489
		{
			title = "Set Visibility, Tangibility";
			prefix = "(489)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Visibility";
				type = 11;
				enum
				{
					0 = "No change";
					1 = "Visible";
					2 = "Invisible";
				}
			}
			arg2
			{
				title = "Tangibility";
				type = 11;
				enum
				{
					0 = "No change";
					1 = "Tangible";
					2 = "Intangible";
				}
			}
		}

		491
		{
			title = "Set Translucency";
			prefix = "(491)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Translucency level";
			}
			arg2
			{
				title = "Set/Add?";
				type = 11;
				enum = "setadd";
			}
		}

		492
		{
			title = "Fade Translucency";
			prefix = "(492)";
			arg0
			{
				title = "PolyObject ID";
				type = 14;
			}
			arg1
			{
				title = "Translucency level";
			}
			arg2
			{
				title = "Fading speed";
			}
			arg3
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Add to current translucency";
					2 = "Interrupt ongoing fades";
					4 = "Speed is duration";
					8 = "Don't change collision";
					16 = "No collision during fade";
				}
			}
		}
	}

	scrollpush
	{
		title = "Scrollers and Pushers";

		500
		{
			title = "Scroll Walls";
			prefix = "(500)";
			arg0
			{
				title = "Side";
				type = 11;
				enum = "frontbackboth";
			}
			arg1
			{
				title = "Horizontal speed";
			}
			arg2
			{
				title = "Vertical speed";
			}
		}

		502
		{
			title = "Scroll Walls Remotely";
			prefix = "(502)";
			arg0
			{
				title = "Linedef tag";
				type = 15;
			}
			arg1
			{
				title = "Side";
				type = 11;
				enum = "frontbackboth";
			}
			arg2
			{
				title = "Horizontal speed";
			}
			arg3
			{
				title = "Vertical speed";
			}
			arg4
			{
				title = "Type";
				type = 11;
				enum = "scrolltype";
			}
		}

		510
		{
			title = "Scroll Planes";
			prefix = "(510)";
			arg0
			{
				title = "Sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
			arg2
			{
				title = "Scroll/Carry?";
				type = 11;
				enum = "scrollcarry";
			}
			arg3
			{
				title = "Base speed";
			}
			arg4
			{
				title = "Type";
				type = 26;
				enum = "scrolltype";
				flags
				{
					4 = "Non-exclusive";
				}
			}
		}

		541
		{
			title = "Wind/Current";
			prefix = "(541)";
			arg0
			{
				title = "Sector tag";
				type = 13;
			}
			arg1
			{
				title = "Horizontal speed";
			}
			arg2
			{
				title = "Vertical speed";
			}
			arg3
			{
				title = "Type";
				type = 11;
				enum
				{
					0 = "Wind";
					1 = "Current";
				}
			}
			arg4
			{
				title = "Flags";
				type = 12;
				flags
				{
					1 = "Slide";
					2 = "Non-exclusive";
				}
			}
		}
	}

	light
	{
		title = "Lighting";

		600
		{
			title = "Copy Light Level to Tagged Sector's Planes";
			prefix = "(600)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Affected planes";
				type = 11;
				enum = "floorceiling";
			}
		}

		602
		{
			title = "Adjustable Pulsating Light";
			prefix = "(602)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Brightness 1";
			}
			arg3
			{
				title = "Use target brightness?";
				type = 11;
				enum = "noyes";
			}
			arg4
			{
				title = "Brightness 2";
			}
		}

		603
		{
			title = "Adjustable Flickering Light";
			prefix = "(603)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Speed";
			}
			arg2
			{
				title = "Brightness 1";
			}
			arg3
			{
				title = "Use target brightness?";
				type = 11;
				enum = "noyes";
			}
			arg4
			{
				title = "Brightness 2";
			}
		}

		604
		{
			title = "Adjustable Blinking Light";
			prefix = "(604)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Brightness 1 tics";
			}
			arg2
			{
				title = "Brightness 2 tics";
			}
			arg3
			{
				title = "Brightness 1";
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "Use target brightness";
					2 = "Synchronized";
				}
			}
			arg5
			{
				title = "Brightness 2";
			}
		}

		606
		{
			title = "Copy Colormap";
			prefix = "(606)";
			arg0
			{
				title = "Target sector tag";
				type = 13;
			}
			arg1
			{
				title = "Colormap sector tag";
				type = 13;
			}
		}
	}

	slope
	{
		title = "Slope";

		700
		{
			title = "Create Sector-Based Slope";
			prefix = "(700)";
			id = "plane_align";
			arg0
			{
				title = "Floor";
				type = 11;
				enum = "frontback";
			}
			arg1
			{
				title = "Ceiling";
				type = 11;
				enum = "frontback";
			}
			arg2
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "No physics";
					2 = "Dynamic";
					4 = "Copy to other side";
				}
			}
		}

		704
		{
			title = "Create Vertex-Based Slope";
			prefix = "(704)";
			arg0
			{
				title = "Plane";
				type = 11;
				enum
				{
					0 = "Front floor";
					1 = "Front ceiling";
					2 = "Back floor";
					3 = "Back ceiling";
				}
			}
			arg1
			{
				title = "Vertex 1 tag";
				type = 14;
			}
			arg2
			{
				title = "Vertex 2 tag";
				type = 14;
			}
			arg3
			{
				title = "Vertex 3 tag";
				type = 14;
			}
			arg4
			{
				title = "Flags";
				type = 12;
				enum
				{
					1 = "No physics";
					2 = "Dynamic";
				}
			}
		}

		720
		{
			title = "Copy Slope";
			prefix = "(720)";
			arg0
			{
				title = "Front floor tag";
				type = 13;
			}
			arg1
			{
				title = "Front ceiling tag";
				type = 13;
			}
			arg2
			{
				title = "Back floor tag";
				type = 13;
			}
			arg3
			{
				title = "Back ceiling tag";
				type = 13;
			}
			arg4
			{
				title = "Share slope";
				type = 12;
				enum
				{
					1 = "Front floor to back sector";
					2 = "Back floor to front sector";
					4 = "Front ceiling to back sector";
					8 = "Back ceiling to front sector";
				}
			}
		}

		799
		{
			title = "Set Tagged Dynamic Slope Vertex to Front Sector Height";
			prefix = "(799)";
			arg0
			{
				title = "Apply height";
				type = 11;
				enum
				{
					0 = "Absolute";
					1 = "Relative";
				}
			}
		}
	}
}
