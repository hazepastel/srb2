common
{
	// Simulate Doom brightness levels (turn this off for linear lighting)
	doomlightlevels = true;

	// Enables support for long (> 8 chars) texture names
	// WARNING: this should only be enabled for UDMF game configurations!
	// WARNING: enabling this will make maps incompatible with Doom Builder 2 and can lead to problems in Slade 3!
	longtexturenames = false;

	// These directory names are ignored when loading PK3/PK7/Directory resources
	ignoreddirectories = ".svn .git";

	// Files with these extensions are ignored when loading PK3/PK7/Directory resources
	ignoredextensions = "wad pk3 pk7 bak backup1 backup2 backup3 zip rar 7z";

	// Default testing parameters
	testparameters = "-file \"%AP\" \"%F\" -warp %L";
	testshortpaths = true;

	// Action special help
	actionspecialhelp = "https://wiki.srb2.org/wiki/Linedef_type_%K";

	// Generalized actions
	generalizedlinedefs = false;
	generalizedsectors = true;

	// Maximum safe map size check (0 means skip check)
	safeboundary = 1;

	// Map boundaries. Map objects can only be placed within these boundaries
	leftboundary = -32768;
	rightboundary = 32767;
	topboundary = 32767;
	bottomboundary = -32768;

	// Texture loading options
	mixtexturesflats = true;
	defaulttexturescale = 1.0f;
	defaultflatscale = 1.0f;
	scaledtextureoffsets = true;

	// Thing number for start position in 3D Mode
	start3dmode = 3328;

	// Texture sources
	textures
	{
		include("SRB222_misc.cfg", "textures");
	}

	// Patch sources
	patches
	{
		include("SRB222_misc.cfg", "patches");
	}

	// Sprite sources
	sprites
	{
		include("SRB222_misc.cfg", "sprites");
	}

	// Flat sources
	flats
	{
		include("SRB222_misc.cfg", "flats");
	}
}

mapformat_doom
{
	// The format interface handles the map data format
	formatinterface = "DoomMapSetIO";

	// Default nodebuilder configurations
	defaultsavecompiler = "zennode_normal";
	defaulttestcompiler = "zennode_fast";

	/*
	GAME DETECT PATTERN
	Used to guess the game for which a WAD file is made.

	1 = One of these lumps must exist
	2 = None of these lumps must exist
	3 = All of these lumps must exist
	*/

	gamedetect
	{
		EXTENDED = 2;


		BEHAVIOR = 2;

		E#M# = 2;

		MAP?? = 1;
	}

	/*
	MAP LUMP NAMES
	Map lumps are loaded with the map as long as they are right after each other. When the editor
	meets a lump which is not defined in this list it will ignore the map if not satisfied.
	The order of items defines the order in which lumps will be written to WAD file on save.
	To indicate the map header lump, use ~MAP

	Legenda:
	required = Lump is required to exist.
	blindcopy = Lump will be copied along with the map blindly. (usefull for lumps Doom Builder doesn't use)
	nodebuild = The nodebuilder generates this lump.
	allowempty = The nodebuilder is allowed to leave this lump empty.
	script = This lump is a text-based script. Specify the filename of the script configuration to use.
	*/

	maplumpnames
	{
		include("SRB222_misc.cfg", "doommaplumpnames");
	}

	// When this is set to true, sectors with the same tag will light up when a line is highlighted
	linetagindicatesectors = true;

	// Special linedefs
	include("SRB222_misc.cfg", "speciallinedefs");

	// Default flags for first new thing
	defaultthingflags
	{
	}

	// DEFAULT SECTOR BRIGHTNESS LEVELS
	sectorbrightness
	{
		include("SRB222_misc.cfg", "sectorbrightness");
	}

	// SECTOR TYPES
	sectortypes
	{
		include("SRB222_sectors.cfg", "sectortypes");
	}

	// GENERALISED SECTOR TYPES
	gen_sectortypes
	{
		include("SRB222_sectors.cfg", "gen_sectortypes");
	}

	// LINEDEF FLAGS
	linedefflags
	{
		include("SRB222_misc.cfg", "linedefflags");
	}

	// Linedef flags UDMF translation table
	// This is needed for copy/paste and prefabs to work properly
	// When the UDMF field name is prefixed with ! it is inverted
	linedefflagstranslation
	{
		include("SRB222_misc.cfg", "linedefflagstranslation");
	}

	// LINEDEF ACTIVATIONS
	linedefactivations
	{
	}

	// LINEDEF TYPES
	linedeftypes
	{
		include("SRB222_linedefs.cfg", "doom");
	}

	// THING FLAGS
	thingflags
	{
		include("SRB222_misc.cfg", "thingflags");
	}

	// Thing flags UDMF translation table
	// This is needed for copy/paste and prefabs to work properly
	// When the UDMF field name is prefixed with ! it is inverted
	thingflagstranslation
	{
		include("SRB222_misc.cfg", "thingflagstranslation");
	}

	// THING FLAGS ERROR MASK
	// Mask for the thing flags which indicates the options
	// that make the same thing appear in the same modes
	thingflagsmask1 = 7;	// 1 + 2 + 4
	thingflagsmask2 = 0;
}

mapformat_udmf
{
	// The format interface handles the map data format
	formatinterface = "UniversalMapSetIO";

	// Default nodebuilder configurations
	defaultsavecompiler = "zdbsp_udmf_normal";
	defaulttestcompiler = "zdbsp_udmf_fast";

	// Determines the textmap namespace
	engine = "srb2";

	maplumpnames
	{
		include("UDMF_misc.cfg", "udmfmaplumpnames_begin");
		include("SRB222_misc.cfg", "udmfmaplumpnames");
		include("UDMF_misc.cfg", "udmfmaplumpnames_end");
	}

	universalfields
	{
		include("SRB222_misc.cfg", "universalfields");
	}

	// When this is set to true, sectors with the same tag will light up when a line is highlighted
	linetagindicatesectors = false;

	// Special linedefs
	include("SRB222_misc.cfg", "speciallinedefs_udmf");

	// Default flags for first new thing
	defaultthingflags
	{
	}

	// SECTOR FLAGS
	sectorflags
	{
		include("SRB222_misc.cfg", "sectorflags");
	}

	// DEFAULT SECTOR BRIGHTNESS LEVELS
	sectorbrightness
	{
		include("SRB222_misc.cfg", "sectorbrightness");
	}

	// SECTOR TYPES
	sectortypes
	{
		include("SRB222_sectors.cfg", "sectortypes");
	}

	// GENERALISED SECTOR TYPES
	gen_sectortypes
	{
		include("SRB222_sectors.cfg", "gen_sectortypes");
	}

	// LINEDEF FLAGS
	linedefflags
	{
		include("SRB222_misc.cfg", "linedefflags_udmf");
	}

	linedefflagstranslation
	{
		include("SRB222_misc.cfg", "linedefflagstranslation");
	}

	// LINEDEF RENDERSTYLES
	linedefrenderstyles
	{
		include("SRB222_misc.cfg", "linedefrenderstyles");
	}

	// THING FLAGS
	thingflags
	{
		include("SRB222_misc.cfg", "thingflags_udmf");
	}

	// Thing flags UDMF translation table
	// This is needed for copy/paste and prefabs to work properly
	// When the UDMF field name is prefixed with ! it is inverted
	thingflagstranslation
	{
		include("SRB222_misc.cfg", "thingflagstranslation");
	}

	// How to compare thing flags (for the stuck things error checker)
	thingflagscompare
	{
		include("UDMF_misc.cfg", "thingflagscompare");
	}

	// LINEDEF TYPES
	linedeftypes
	{
		include("SRB222_linedefs.cfg", "udmf");
	}
}