def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion 26
    defaultConfig {
        if (buildAsApplication) {
            applicationId "io.github.hazepastel.reveries"
        }

        minSdkVersion 14
        targetSdkVersion 26
        versionCode 22140
        versionName "2.2.14"
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=android-16"
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
            }
        }
        flavorDimensions "assets"
        productFlavors {
            gameNoAssets {
                dimension "assets"
            }
            gameFull {
                dimension "assets"
            }
        }
        applicationVariants.all { variant ->
            if (variant.getFlavorName() == 'gameNoAssets') {
                variant.mergeAssetsProvider.get().doLast {
                    println("Removing game assets from the application package")
                    delete(fileTree(
                        dir: outputDir,
                        includes: [
                            'srb2.pk3',
                            'zones.pk3',
                            'player.dta',
                            'reveries.pk3',
                            'patch.pk3',
                            'music.dta']
                    ))
                }
            }
        }
        ext {
            useBuildDate = false
        }

        // Lactozilla: This formats the application package's name.
        def srb2PackageName = "srb2-reveries"

        // Game version string
        srb2PackageName += "-v" + (defaultConfig.versionName).replace(".", "")

        // Build date
        if (defaultConfig.ext.useBuildDate)
            srb2PackageName += "-" + (new Date()).format('yyyyMMdd')

        setProperty("archivesBaseName", srb2PackageName)
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            externalNativeBuild {
                ndkBuild {
                    arguments "BUILD_TYPE=release"
                }
            }
        }
        debug {
            externalNativeBuild {
                ndkBuild {
                    arguments "BUILD_TYPE=debug"
                }
            }
        }
    }

    // Lactozilla: This task executes the comptime script.
    task generateCompTime(type: Exec) {
        def comptimeScript = 'comptime'

        println "${comptimeScript}: Generating build time"

        workingDir "$projectDir/../../"
        ignoreExitValue true

        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
            commandLine 'cmd', '/c', comptimeScript + '.bat', 'src/'
        } else {
            commandLine './' + comptimeScript + '.sh', 'src/'
        }
    }
    lint {
        abortOnError false
    }
    preBuild.dependsOn generateCompTime

    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            ndkBuild {
                path 'jni/Android.mk'
            }
        }

    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "io.github.hazepastel.reveries.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
